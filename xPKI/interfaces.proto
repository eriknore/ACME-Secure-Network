package interfaces;

option java_package = "its.service.interfaces";
//enum Constants {
//	INVALID_VALUE = -1;
//}

//service VouReq{
//	rpc SayHello (msgVoucherReq_V2LTCA) returns (msgVoucherRes_LTCA2V) {}
//}
/*****************************************************************************/
/// The request profile keeps track of the requests using the incoming identity to respond to the appropriate requests accordingly
message msgReqProfile {
	required string strReqIdentification = 1 [default = ""];
	required int32 iNonce = 2 [default = -1];
};
/***************************** FORMAT DEFINITIONS ****************************/
///       Elliptic-Curve Signature Format Based on IEEE 1609.2 Standard
message msgSignature {
	optional uint32 uiCurveOrderOctets = 1 [default = 0];
	optional uint32 uiSignLen = 2 [default = 0];
	optional string strSignature = 3 [default = ""];
};
/*****************************************************************************/
///                 Error Code and Message Description Format
message msgError {
	required int32 iErrCode = 1 [default = 100];
	required string strErrMsgDes = 2 [default = ""];
};
/*****************************************************************************/
///             EC Public Key Format Based on IEEE 1609.2 Standard
message msgECPublicKey {
	required uint32 uiPsnymPublicKeyLen = 1 [default = 0];
	required string strPsnymPublicKey = 2 [default = ""];
};

///////////////////////////////////////////////////////////////////////////////
/// nsSignerIdentifierType Format Based on IEEE 1609.2 Standard
message msgSignerIdentifierType {
	enum SignerIdentifierType {
		certificate = 0;
		certificateDigest = 1;
		certificateChain = 2;
		self = 4;
		// (2^8-1)
	};
};

///////////////////////////////////////////////////////////////////////////////
/// nsSubType Format Based on IEEE 1609.2 Standard
message msgSubType {
	enum SubjectType {
		wsa_ca1 = 0;
		ca = 1;
		wsa_signer = 2;
		rsu = 3;
		psobu = 4;
		obu_identified = 5;
		crl_signer = 6;
		csr_signer = 8;
		root_ca = 9;
		//(2^8 - 1)
	};
};

///////////////////////////////////////////////////////////////////////////////
/// nsSubTypeFlags Format Based on IEEE 1609.2 Standard
message msgSubTypeFlags {
	enum SubjectTypeFlags {
		wsa_ca = 0;
		ca = 1;
		wsaSigner = 2;
		rsu = 3;
		psobu = 4;
		obuIdentified = 5;
		crlSigner = 6;
		csrSigner = 8;
	};
};

///////////////////////////////////////////////////////////////////////////////
/// nsAIDType Format Based on IEEE 1609.2 Standard
message msgAIDType {
	enum AIDType {
		fullySpecified = 0;
		matchAnyAcm = 1;
		fromIssuer = 2;
		//(2^8-1)
	};
};

///////////////////////////////////////////////////////////////////////////////
/// nsRegionType Format Based on IEEE 1609.2 Standard
message msgRegionType {
	enum RegionType {
		fromIssuer = 0;
		circle = 1;
		rectangle = 2;
		polygon = 3;
		none = 4;
		//(2^8 - 1)
	};
};

///////////////////////////////////////////////////////////////////////////////
/// nsWSASignerScope Format Based on IEEE 1609.2 Standard
message msgWSASignerScope {
	enum WSASignerScope {
		wsaSignerAdvertisingSpecificApplications = 0;
		wsaSignerOperateWithinCertainArea = 1;
		wsaSignerUniqueIdentifyingName = 2;
	};
};

///////////////////////////////////////////////////////////////////////////////
///          nsRequestScopeType Format Based on IEEE 1609.2 Standard

message msgRequestScopeType {
	enum RequestScopeType {
		specifiedInRequest = 0;
		specifiedByCA = 1;
		// (2^8 - 1)
	};
};

/*****************************************************************************/
///           Voucher Request from Vehicle to LTCA

message msgVoucherReq_V2LTCA {
	required int32 iReqType = 1 [default = -1];
        required string strUserName = 2 [default = ""];
        required string strPwd = 3 [default = ""];
	required string strEmailAddress = 4 [default = ""];
	required string strCaptcha = 5 [default = ""]; // A CAPTCHA (an acronym for "Completely Automated Public Turing test to tell Computers and Humans Apart")
	required int32 iNonce = 6 [default = -1];
	required int64 tTimeStamp = 7 [default = -1];
};
/*****************************************************************************/
///          Voucher Response from LTCA to Vehicle

message msgVoucherRes_LTCA2V {
	required int32 iReqType = 1 [default = -1];
        optional msgSignerInfo stSigner = 2;
	required string strVoucher = 3 [default = ""];
	required int32 iNonce = 4 [default = -1];
	required int64 tTimeStamp = 5 [default = -1];
	required msgError stErrInfo = 6;
	optional msgSignature stSign = 7;
};

///////////////////////////////////////////////////////////////////////////////

/*****************************************************************************/
///            X509 Certificate Request from Vehicle to LTCA

message msgX509CertReq_V2LTCA {
	required int32 iReqType = 1 [default = -1];
	required int32 iLTCAIdRange = 2 [default = -1];
	required string strProofOfPossessionVoucher = 3 [default = ""];
	required string strX509CertReq = 4 [default = ""];
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
};
/*****************************************************************************/
///          X509 Certificate Response from LTCA to Vehicle
message msgX509CertRes_LTCA2V {
	required int32 iReqType = 1 [default = -1];
        optional msgSignerInfo stSigner = 2;
	required string strReqIdentification = 3 [default = ""];
	required string strX509Cert = 4 [default = ""];
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	required msgError stErrInfo = 7;
	optional msgSignature stSign = 8;
};

///////////////////////////////////////////////////////////////////////////////
/// nsCRLType Format Based on IEEE 1609.2 Standard
message msgCRLType {
	enum CRLType {
		idOnly = 0;
		idAndExpiry = 1;
		//(2^8 - 1)
	};
};

/*****************************************************************************/
///        2-Dimension Location Format Based on IEEE 1609.2 Standard
message msgTwoDLocation {
	required int32 latitude = 1 [default = -1];
	required int32 longitude = 2 [default = -1];
};

/*****************************************************************************/
///              CircularRegion Format Based on IEEE 1609.2 Standard
message msgCircularRegion {
	required msgTwoDLocation stCenter = 1;
	required uint32 radius = 2 [default = 0];
};

/*****************************************************************************/
///              RectangularRegion Format Based on IEEE 1609.2 Standard
message msgRectangularRegion {
	required msgTwoDLocation stUpperLeft = 1;
	required msgTwoDLocation stLowerRight = 2;
};

/*****************************************************************************/
///              ApplicationID Format Based on IEEE 1609.2 Standard
message msgApplicationID {
	required msgAIDType.AIDType type = 1 [default = fullySpecified];
	required uint32 acid = 2 [default = 0];
	required uint32 acm = 3 [default = 0]; //[(2^8) - 1];
};

/*****************************************************************************/
///            OBUIdentifiedScope Format Based on IEEE 1609.2 Standard
message msgOBUIdentifiedScope {
	required uint32 certSpecificData = 1 [default = 0]; //[(2^16) - 1];
	required msgApplicationID stAppID = 2; // [(2^16) - 1];
};

/*****************************************************************************/
///              GeographicRegion Format Based on IEEE 1609.2 Standard
message msgGeographicRegion {
	required msgRegionType.RegionType regionType = 1 [default = none];
};

/*****************************************************************************/
///              IdentifiedScope Format Based on IEEE 1609.2 Standard
message msgIdentifiedScope {
	required uint32 subjectName = 1 [default = 0]; //[(2^8) - 1];
	required msgApplicationID stAppID = 2; // [(2^16) - 1];
	required msgGeographicRegion stGeoRegion = 3;
};

/*****************************************************************************/
///              AppIDAndPriority Format Based on IEEE 1609.2 Standard
message msgAppIDAndPriority {
	required msgAIDType.AIDType type = 1 [default = fullySpecified];
	required uint32 acid = 2 [default = 0];
	required uint32 acm = 3 [default = 0]; // [(2^8) - 1];
	required uint32 maxPriority = 4 [default = 0];
};

/*****************************************************************************/
///                CAScope Format Based on IEEE 1609.2 Standard
message msgCAScope {
	required msgSubTypeFlags.SubjectTypeFlags TF = 1 [default = wsa_ca];
	required msgApplicationID stAppID = 2;
	required msgAppIDAndPriority stAppsAndPriorities = 3; // [(2^16) - 1];
	required msgGeographicRegion stGeoRegion = 4;
};

/*****************************************************************************/
///              CertSpecificData Format Based on IEEE 1609.2 Standard
message msgCertSpecificData {
	required msgSubType.SubjectType subjectType = 1 [default = wsa_ca1];
	required msgCAScope scopeCA = 2;
	required uint32 responsibleCrlSeries = 3 [default = 0]; // [(2^16) - 1];
	required msgWSASignerScope.WSASignerScope wsaScope = 4 [default = wsaSignerAdvertisingSpecificApplications];
	required msgIdentifiedScope scopeId = 5;
	required msgOBUIdentifiedScope scopeOBU = 6;
};

/*****************************************************************************/
///        ToBeSignedWAVECertificate Format Based on IEEE 1609.2 Standard
message msgToBeSignedWAVECertificate {
	required uint32 uiCertificateVersion = 1 [default = 0];
	required msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
	required int32 iSignerId = 3 [default = -1]; // [8];
	required msgCertSpecificData stCertScope = 4;
	required uint32 uiCrlSeries = 5 [default = 0];
	required string strPsnymCertSerialNo = 6 [default = ""];
	required string strPsnymCertIdentifiableKey = 7 [default = ""];
	required int64 tIsValidFrom = 8 [default = -1];
	required int64 tIsValidTo = 9 [default = -1];
	required msgECPublicKey stPsnymPublicKey = 10;
};

/*****************************************************************************/
///              stPsnymCertFormat Format Based on IEEE 1609.2 Standard
message msgPsnymCertFormat {
	required uint32 uiCertificateVersion = 1 [default = 0];
	required msgToBeSignedWAVECertificate stCertificate = 2;
	optional msgSignature stSign = 3;
};

/*****************************************************************************/
///              SignerInfo Format Based on IEEE 1609.2 Standard
message msgSignerInfo {
	required msgSignerIdentifierType.SignerIdentifierType type = 1 [default = self];
	required string strCertificate = 2 [default = ""];
	optional string strDigest = 3 [default = ""];
	optional string strCertificatesChain = 4 [default = ""];
};

/*****************************************************************************/
/// stPsnymKeysStorage Format contains PRIVATE-KEY, stored on the vehicle storage
message msgPsnymKeysStorage {
	required int32 iPsnymPrivateKeyLen = 1 [default = -1];
	required string strPsnymPrivateKey = 2 [default = ""];
	required msgPsnymCertFormat stPsnymCert = 3;
};

/*****************************************************************************/
//**************************** Obtaining Ticket ******************************/
/*****************************************************************************/
/*****************************************************************************/
///        Ticket Request Format from Vehicle to LTCA to Obtain a Ticket
message msgTicketReq {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiServices = 3 [default = 0]; // The service specifies what the ticket holder can obtain
	required uint32 uiPsnymCertNoRequest = 4 [default = 0];
	required int32 iLTCAIdRange = 5 [default = -1];
	required int32 iPCAIdRange = 6 [default = -1];
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
        required string strX509Cert = 9[default = ""];
	optional msgSignature stSign = 10;
};

/*****************************************************************************/
/// Foreign Ticket Request Format from Foreign Vehicle to LTCA to Obtain a Ticket
message msgForeignTicketReq {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiServices = 3 [default = 0]; // The service specifies what the ticket holder can obtain
	required int32 iNativeLTCACertLength = 6 [default = -1];
	required string strNativeLTCACert = 7 [default = ""];
	required int32 iNativeTicketLength = 8 [default = -1];
	required string strNativeTicket = 9 [default = ""];
	required uint32 uiPsnymCertNoRequest = 10 [default = 0];
	required int32 iNonce = 11 [default = -1];
	required int64 tTimeStamp = 12 [default = -1];
	optional msgSignature stSign = 13;
};

/*****************************************************************************/
message msgVehicleAttributes {
        required uint32 chRole = 1 [default = 0];
        required uint32 uiServices = 2 [default = 0]; // The service specifies what the Ticket holder can obtain
        required uint32 chTypeOfVehicle = 3 [default = 0];
        required uint32 chPolicyId = 4 [default = 0];
};

/*****************************************************************************/
/// Ticket Format, Used to Obtain Pseudonym Certificates from PCA. This is the structure to represent a valid Ticket, issued by LTCA, to be verified by PCA. This Ticket has to be sent from the Vehicle to the PCA.
message msgTicketFormat {
	required int32 iTicketType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required string strTicketSerialNo = 3 [default = ""];
	required string strTicketIdentifiableKey = 4 [default = ""];
	required int32 iLTCAIdRange = 5 [default = -1];
	required int32 iPCAIdRange = 6 [default = -1]; // PCA Id range identifies to whom you can sent the request
	required uint32 uiMaxNoPsnymCert = 7 [default = 0];
	required msgVehicleAttributes stVehicleRole = 8;
	required bool bIsForeignTicket = 9 [default = false];
	required int64 tTicketStartTime = 10 [default = -1];
	required int64 tTicketLifeTime = 11 [default = -1];
	required int64 tPsnymStartTime = 12 [default = -1];
	required int64 tPsnymExpiryTime = 13 [default = -1];
	optional msgSignature stSign = 14;
};

/*****************************************************************************/
///           Ticket Response Format Sent from LTCA to Vehicle
message msgTicketRes {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iTicketSize = 3 [default = -1];
	required string strTicket = 4 [default = ""]; // ==> This corresponds to stTicketFormat, serialized.
	required uint32 uiMaxNoPsnymCert = 5 [default = 0];
	required int32 iLTCAIdRange = 6 [default = -1];
	required int32 iPCAIdRange = 7 [default = -1];
	required int32 iNonce = 8 [default = -1];
	required int64 tTimeStamp = 9 [default = -1];
	required msgError stErrInfo = 10;
	optional msgSignature stSign = 11;
};

/*****************************************************************************/
//***************************** Revoking Ticket *******************************/
/*****************************************************************************/
/*****************************************************************************/
/*****************************************************************************/
///     Request to Revoke Tickets into TRL (Ticket Revocation List) in LTCA

//..................................TBC.......................
/*****************************************************************************/
/*****************************************************************************/
//********************* Obtaining Pseudonym Certificates *********************/
/*****************************************************************************/
/*****************************************************************************/
///              ToBeSignedCSR Format Based on IEEE 1609.2 Standard
message msgToBeSignedCSR {
	required uint32 csrVersion = 1 [default = 0];
	required msgSubType.SubjectType subjectType = 2 [default = wsa_ca1];
	required msgRequestScopeType.RequestScopeType requestType = 3
	[default = specifiedInRequest];
	optional msgCertSpecificData typeSpecificData = 4;
	required msgECPublicKey stECPsnymPublicKey = 5;
};

/*****************************************************************************/
///         WAVECertificateRequest Format Based on IEEE 1609.2 Standard
message msgWAVECertificateRequest {
	optional msgSignerInfo stSigner = 1;
	required msgToBeSignedCSR unsignedCsr = 2;
	optional msgSignature stSign = 3;
};

/*****************************************************************************/
///       Pseudonym Certificate Request Format from Vehicle to PCA
message msgPsnymCertReq_V2PCA {
	required int32 iReqType = 1 [default = -1];
	required int32 iTicketSize = 2 [default = -1];
	required string strTicket = 3 [default = ""];
	required int32 iLTCAIdRange = 4 [default = -1];
	required int32 iPCAIdRange = 5 [default = -1];
	required int32 iLocation = 6 [default = -1];
	required uint32 uiPsnymCertNo = 7 [default = 0];
	repeated msgWAVECertificateRequest pstPsnymCertReq = 8;
	required int32 iNonce = 9 [default = -1];
	required int64 tTimeStamp = 10 [default = -1];
};

/*****************************************************************************/
///          Pseudonym Certificate Response from PCA to Vehicle
message msgPsnymCertRes_PCA2V {
	required int32 iReqType = 1 [default = -1];
        optional msgSignerInfo stSigner = 2;
	required string strReqIdentification = 3 [default = ""];
	required int32 iLTCAIdRange = 4 [default = -1];
	required int32 iPCAIdRange = 5 [default = -1];
	required uint32 uiPsnymCertNo = 6 [default = 0];
	repeated msgPsnymCertFormat stPsnymCert = 7;
	required int32 iNonce = 8 [default = -1];
	required int64 tTimeStamp = 9 [default = -1];
	required msgError stErrInfo = 10;
	optional msgSignature stSign = 11;
};

/*****************************************************************************/
///       Pseudonym Certificate Acknowledge sent from Vehicle to PCA
message msgPsnymCertAck_V2PCA {
	required int32 iReqType = 1 [default = -1];
	required int32 iNonce = 2 [default = -1];
	required int64 tTimeStamp = 3 [default = -1];
	required msgError stErrInfo = 4;
};

/*****************************************************************************/
//************************* Obtaining Pseudonym CRL **************************/
/*****************************************************************************/
/*****************************************************************************/
///                            Pseudonym CRL Format
message msgPsnymCRLFormat {
	required string strPsnymCRLSerialNo = 1 [default = ""];
	required uint32 uiRevokedPsnymCertNo = 2 [default = 0];
	repeated string strRevokedPsnymCertSerialNo = 3;
	required int64 tTimeStamp = 4 [default = -1];
};

/*****************************************************************************/
///             IDAndDate Format Based on IEEE 1609.2 Standard
message msgIDAndDate {
	required string strID = 1 [default = ""];
	required int64 expiry = 2 [default = -1];
};

/*****************************************************************************/
///             ToBeSignedCRL Format Based on IEEE 1609.2 Standard
message msgToBeSignedCRL {
	required msgCRLType.CRLType type = 1 [default = idOnly];
	required uint32 crlSeries = 2 [default = 0];
	required uint32 iCAID = 3 [default = 0];
	required uint32 crlSerial = 4 [default = 0];
	required uint64 tStartPeriod = 5 [default = 0];
	required uint64 tIssueDate = 6 [default = 0];
	required uint64 tNextCRL = 7 [default = 0];
        required uint64 iRevokedPsnymNo = 8 [default = 0];
	repeated string strRevokedPsnymCertSerialNo = 9;
	required msgIDAndDate stEntriesIDAndDate = 10; // [2^64 - 1];
};

/*****************************************************************************/
///                WAVECRL Format Based on IEEE 1609.2 Standard
message msgWAVECRL {
	required uint32 uiWaveCRLVersion = 1 [default = 0];
	optional msgSignerInfo stSigner = 2;
	required msgToBeSignedCRL stToBeSignedCRL = 3;
	optional msgSignature stSign = 4;
};

/*****************************************************************************/
///        WAVECertificateResponse Format Based on IEEE 1609.2 Standard
message msgWAVECertificateResponse {
	required msgWAVECRL stCRLPath = 1;
};

/*****************************************************************************/
///      Pseudonym CRL Request from Vehicle to PCA to Obtain Pseudo-CRL
message msgPsnymCRLReq_V2PCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiCurrentCRLVersion = 3 [default = 0];
	required int32 iPCAIdRange = 4 [default = -1];
	required int32 iRegionId = 5 [default = -1];
	required int32 iPsnymCertLen = 6 [default = -1];
	required string strPsnymCert = 7 [default = ""];
	required int32 iNonce = 8 [default = -1];
	required int64 tTimeStamp = 9 [default = -1];
	optional msgSignature stSign = 10;
};


/// Pseudonym CRL Response from PCA to Vehicle to fetch the latest version of CRL
message msgPsnymCRLRes_PCA2V {
	required int32 iReqType = 1 [default = -1];
        optional msgSignerInfo stSigner = 2;
	required int32 iPCAIdRange = 3 [default = -1];
	required int32 iNonce = 4 [default = -1];
	required int64 tTimeStamp = 5 [default = -1];
	required msgError stErrInfo = 6;
	required msgWAVECRL stWAVECRLRes = 7;
	optional msgSignature stSign = 8;
};

/*****************************************************************************/
/// Pseudonym OCSP Request from Vehicle to PCA to Obtain Pseudonym Revocation Status
message msgPsnymOCSPReq_V2PCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iPCAIdRange = 3 [default = -1];
	required int32 iRegionId = 4 [default = -1];
	required uint32 uiNoOfPsnymsToBeChecked = 5 [default = 0];
	repeated string strPsnymsToBeChecked = 6;
	required int32 iPsnymCertLen = 7 [default = -1];
	required string strPsnymCert = 8 [default = ""];
	required int32 iNonce = 9 [default = -1];
	required int64 tTimeStamp = 10 [default = -1];
	optional msgSignature stSign = 11;
};

/// 
message msgPsnymRevocationStatus {
        required string strPsnymSerialNo = 1 [default = ""];
        required bool bRevocationStatus = 2 [default = false];
};

/// Pseudonym OCSP Response from PCA to Vehicle 
message msgPsnymOCSPRes_PCA2V {
	required int32 iReqType = 1 [default = -1];
        optional msgSignerInfo stSigner = 2;
        required int32 iPCAIdRange = 3 [default = -1];
        required uint32 uiNoOfPsnymsToBeChecked = 4 [default = 0];
        repeated msgPsnymRevocationStatus stRevocationStatus = 5;
        required int32 iNonce = 6 [default = -1];
        required int64 tTimeStamp = 7 [default = -1];
        required msgError stErrInfo = 8;
        optional msgSignature stSign = 9;
}

/*****************************************************************************/
///      Request to Append Revoked Pseudonyms into the CRL (Police to RA)
message msgRevokePsnymCertReq_P2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iPCAIdRange = 3 [default = -1];
	required string strECSecManECPubKey = 4 [default = ""];
	required uint32 uiNoOfPsnymsToBeRevoked = 5 [default = 0];
	repeated string strRevokedPsnymCert = 6 ;
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	optional msgSignature stSign = 9;
};

/*****************************************************************************/
///     Request to Append Revoked Pseudonyms into the CRL (RA to PCA)
message msgRevokePsnymCertReq_RA2PCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
	repeated string strRevokedPsnymCert = 4;
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	optional msgSignature stSign = 7;
};

/*****************************************************************************/
///    Response to Append Revoked Pseudonyms into the CRL (PCA to RA)
message msgRevokePsnymCertRes_PCA2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
	required uint32 uiNoOfSuccessfullyRevokedPsnyms = 4 [default = 0];
	required uint32 uiNoOfSuccessfullyRevokedTickets = 5 [default = 0];
};

/*****************************************************************************/
/// Request to Append the Corresponding X509 Certificate for a Ticket on LTCA
message msgRevokeX509CertReq_RA2LTCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
	repeated string strTicketSerialNo = 4;
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	optional msgSignature stSign = 7;
};

/*****************************************************************************/
/// RA's Response to the Police to append revoked pseudonyms into the CRL
message msgRevokePsnymCertRes_RA2P {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeRevoked = 3 [default = 0];
	required uint32 uiNoOfSuccessfullyRevokedX509Cert = 4 [default = 0];
	required uint32 uiNoOfSuccessfullyRevokedPsnyms = 5 [default = 0];
	message msgPsnymRevocationErrInfo {
		required int32 iErrGenSource = 1 [default = -1];
		required msgError stDetailedErrInfo = 2;
	}

	repeated msgPsnymRevocationErrInfo pstPsnymRevocationErrInfo = 6;
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	required msgError stErrInfo = 9;
	optional msgSignature stSign = 10;
};

/*****************************************************************************/
/*****************************************************************************/
//********************** Performing Pseudonym Resolution *********************/
/*****************************************************************************/
/*****************************************************************************/
/// Data structure sent from Police to RA to perform pseudonym resolution
message msgPsnymResolutionReq_Police2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
	message msgPsnymResolution {
		required int32 iPsnymCertLen = 1 [default = -1];
		required string strPsnymCert = 2 [default = ""];
	};

	repeated msgPsnymResolution pstPsnymResolutionInfo = 4;
	required int32 iPoliceId = 5 [default = -1];
	required int32 iRAIdRange = 6 [default = -1];
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	optional msgSignature stSign = 9;
};

/*****************************************************************************/
/// Data structure sent from RA to PCA to fetch the Ticket-ID, corresponding to a pseudonym certificate
message msgPsnymResolutionReq_RA2PCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
	message msgPsnymResolution {
		required int32 iPsnymCertLen = 1 [default = -1];
		required string strPsnymCert = 2 [default = ""];
	};

	repeated msgPsnymResolution pstPsnymResolutionInfo = 4;
	required int32 iRAIdRange = 5 [default = -1];
	required int32 iPCAIdRange = 6 [default = -1];
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	optional msgSignature stSign = 9;
};

/*****************************************************************************/
/// Data structure sent from PCA to RA to send the corresponding Ticket-ID for a specific pseudonym certificate
message msgPsnymResolutionRes_PCA2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
	message msgPsnymResolution {
		required string strPsnymCertSerialNo = 1 [default = ""];
		required string strTicketSerialNo = 2 [default = ""];
		required string strTicketIdentifiableKey = 3 [default = ""];
		required msgError stErrInfo = 4;
	}

	repeated msgPsnymResolution pstPsnymResolutionInfo = 4;
	required int32 iRAIdRange = 5 [default = -1];
	required int32 iPCAIdRange = 6 [default = -1];
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	required msgError stErrInfo = 9;
	optional msgSignature stSign = 10;
};

/*****************************************************************************/
/// Data structure sent from RA to LTCA to query for the corresponding X509 Certificate for a specific Ticket-ID
message msgPsnymResolutionReq_RA2LTCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
	message msgPsnymResolution {
		required string strTicketSerialNo = 1 [default = ""];
		required string strTicketIdentifiableKey = 2 [default = ""];
	};

	repeated msgPsnymResolution pstPsnymResolutionInfo = 4;
	required int32 iRAIdRange = 5 [default = -1];
	required int32 iLTCAIdRange = 6 [default = -1];
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	optional msgSignature stSign = 9;
};

/*****************************************************************************/
/// Data structure sent from LTCA to RA to send the corresponding X509 Certificate for a specific pseudonym certificate
message msgPsnymResolutionRes_LTCA2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
	message msgPsnymResolution {
		required string strTicketSerialNo = 1 [default = ""];
		required string strVehX509CertSerialNo = 2 [default = ""];
		required int32 iVLTCSize = 3 [default = -1];
		required string strVehX509Cert = 4 [default = ""];
		required msgError stErrInfo = 5;
	};

	repeated msgPsnymResolution pstPsnymResolutionInfo = 4;
	required int32 iRAIdRange = 5 [default = -1];
	required int32 iLTCAIdRange = 6 [default = -1];
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	required msgError stErrInfo = 9;
	optional msgSignature stSign = 10;
};

/*****************************************************************************/
/// Data structure sent from RA to Police to send the corresponding X509 Certificate for a specific pseudonym certificate
message msgPsnymResolutionRes_RA2Police {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
	message msgPsnymResolution {
		required int32 iPsnymCertLen = 1 [default = -1];
		required string strPsnymCert = 2 [default = ""];
		required string strVehX509CertSerialNo = 3 [default = ""];
		required int32 iVLTCSize = 4 [default = -1];
		required string strVehX509Cert = 5 [default = ""];
		required msgError stErrInfo = 6;
	};

	repeated msgPsnymResolution pstPsnymResolutionInfo = 4;
	required int32 iRAIdRange = 5 [default = -1];
	required int32 iLTCAIdRange = 6 [default = -1];
	required int32 iPCAIdRange = 7 [default = -1];
	required int32 iPoliceId = 8 [default = -1];
	required int32 iNonce = 9 [default = -1];
	required int64 tTimeStamp = 10 [default = -1];
	required msgError stErrInfo = 11;
	optional msgSignature stSign = 12;
};

/*****************************************************************************/
/// Data structure sent from Police to RA to acknowledge RA about successfully receiving the result, or if any error happens
message msgPsnymResolutionAck_Police2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfPsnymsToBeResolved = 3 [default = 0];
	required int32 iPoliceId = 4 [default = -1];
	required int32 iRAIdRange = 5 [default = -1];
	repeated msgError pstPsnymResolutionErrInfo = 6;
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	required msgError stErrInfo = 9;
	optional msgSignature stSign = 10;
};

// ############################################################################
/*****************************************************************************/
/*****************************************************************************/
/***************** Banning Tickets From Obtaining Pseudonyms ******************/
/*****************************************************************************/
/*****************************************************************************/
/// Data structure sent from Police to RA to ban Tickets from obtaining pseudonyms
message msgBanTicketsReq_Police2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 chPolicyId = 3 [default = 0];
	required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
	message msgBannedTickets {
		required string strSerialNo = 1 [default = ""];
		required string strTicket = 2 [default = ""];
	};

	repeated msgBannedTickets pstBannedTicketsInfo = 5;
	required int32 iPoliceId = 6 [default = -1];
	required int32 iRAIdRange = 7 [default = -1];
	required int32 iNonce = 8 [default = -1];
	required int64 tTimeStamp = 9 [default = -1];
	optional msgSignature stSign = 10;
};

/*****************************************************************************/
/// Data structure sent from RA to PCA to ban Tickets from obtaining pseudonyms
message msgBanTicketsReq_RA2PCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 chPolicyId = 3 [default = 0];
	required uint32 uiNoOfTicketsToBeBanned = 4 [default = 0];
	message msgBannedTickets {
		required string strSerialNo = 1 [default = ""];
		required string strTicket = 2 [default = ""];
	};

	repeated msgBannedTickets pstBannedTicketsInfo = 5;
	required int32 iRAIdRange = 6 [default = -1];
	required int32 iLTCAIdRange = 7 [default = -1];
	required int32 iNonce = 8 [default = -1];
	required int64 tTimeStamp = 9 [default = -1];
	optional msgSignature stSign = 10;
};

/*****************************************************************************/
/// Data structure sent from PCA to RA to response on banning tickets
message msgBanTicketsRes_PCA2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
	required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
	message msgBannedTickets {
		required string strTicketSerialNo = 1 [default = ""];
		required msgError stErrInfo = 2;
	};

	repeated msgBannedTickets pstBannedTicketsInfo = 5;
	required int32 iRAIdRange = 6 [default = -1];
	required int32 iLTCAIdRange = 7 [default = -1];
	required int32 iNonce = 8 [default = -1];
	required int64 tTimeStamp = 9 [default = -1];
	required msgError stErrInfo = 10;
	optional msgSignature stSign = 11;
};

/*****************************************************************************/
/// Data structure sent from RA to Police to response the authority on banning the tickets. Appropriate error messages will be sent if happened.
message msgBanTicketsRes_RA2Police {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
	required uint32 uiNoOfSuccessfullyBannedTickets = 4 [default = 0];
	message msgBannedTickets {
		required string strTicketSerialNo = 1 [default = ""];
		required int32 iTicketLen = 2 [default = -1];
		required string strTicket = 3 [default = ""];
		required msgError stErrInfo = 4;
	};

	repeated msgBannedTickets pstBannedTicketsInfo = 5;
	required int32 iRAIdRange = 6 [default = -1];
	required int32 iLTCAIdRange = 7 [default = -1];
	required int32 iPCAIdRange = 8 [default = -1];
	required int32 iPoliceId = 9 [default = -1];
	required int32 iNonce = 10 [default = -1];
	required int64 tTimeStamp = 11 [default = -1];
	required msgError stErrInfo = 12;
	optional msgSignature stSign = 13;
};

/*****************************************************************************/
/// Data structure sent from Police to RA to acknowledge RA about successfully receiving the result on banning tickets, or if any error happens .
message msgBanTicketsAck_Police2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 uiNoOfTicketsToBeBanned = 3 [default = 0];
	required int32 iPoliceId = 4 [default = -1];
	required int32 iRAIdRange = 5 [default = -1];
	repeated msgError pstTicketErrInfo = 6;
	required int32 iNonce = 7 [default = -1];
	required int64 tTimeStamp = 8 [default = -1];
	required msgError stErrInfo = 9;
	optional msgSignature stSign = 10;
};

// ############################################################################
/*****************************************************************************/
/*****************************************************************************/
/// Vehicle's configurations identifies all the required settings in order to execute and perform operations on the vehicle execution file.
message msgVehicleConfig {
// Vehicle's configurations parameters, which is defined by the server
	required string strLTCAServerURL = 1 [default = ""]; //**< Identifies the URL to access LTCA's server */
	required string strPCAServerURL = 2 [default = ""]; //**< Identifies the URL to access PCA's server */
	required string strRAServerURL = 3 [default = ""]; //**< Identifies the URL to access RA's server */
	required string strLTCAMethodName = 4 [default = ""]; //**< Identifies the method to call the corresponding LTCA's function */
	required string strPCAMethodName = 5 [default = ""]; //**< Identifies the method to call the corresponding PCA's function */
	required string strRAMethodName = 6 [default = ""]; //**< Identifies the method to call the corresponding RA's function */
	required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0]; //**< Identifies the maximum number of bytes to transfer using XMLRPC */
	required float fVersion = 8 [default = -1]; //**< Identifies the configuration version */
};

/*****************************************************************************/
/// Police configurations identifies the settings in order to execute and perform operations on police execution file
message msgPoliceConfig {
// Police's configurations parameters, which is defined by the server
	required string strLTCAServerURL = 1 [default = ""]; //**< Identifies the URL to access LTCA's server */
	required string strPCAServerURL = 2 [default = ""]; //**< Identifies the URL to access PCA's server */
	required string strRAServerURL = 3 [default = ""]; //**< Identifies the URL to access RA's server */
	required string strLTCAMethodName = 4 [default = ""]; //**< Identifies the method to call the corresponding LTCA's function */
	required string strPCAMethodName = 5 [default = ""]; //**< Identifies the method to call the corresponding PCA's function */
	required string strRAMethodName = 6 [default = ""]; //**< Identifies the method to call the corresponding RA's function */
	required uint64 lMaxXMLRPCLimitBufferSize = 7 [default = 0]; //**< Identifies the maximum number of bytes to transfer using XMLRPC */
	required float fVersion = 8 [default = -1]; //**< Identifies the configuration version */
};

/*****************************************************************************/
/// VPKIlib configurations is the settings common among all the entities, vehicle, police and the servers. All the policies are also defined here.
message msgVPKILibConfig {
/// VPKILib's configurations parameters, which is defined by the server
	required int32 iRCAId = 1 [default = -1]; //**< Identifies RCA's identification */
	required int32 iPCAId = 2 [default = -1]; //**< Identifies PCA's identification */
	required int32 iLTCAId = 3 [default = -1]; //**< Identifies LTCA's identification */
	required int32 iRAId = 4 [default = -1]; //**< Identifies RA's identification */
	required int32 iPoliceId = 5 [default = -1];; //**< Identifies Police's identification */
	required int32 iRegionId = 6 [default = -1];; //**< Identifies region identification */
	required int32 iLocationId = 7 [default = -1]; //**< Identifies location identification */
	required string strGetHelpCommandName = 8 [default = ""]; //**< Identifies the command name to get help */
	message msgTicketPolicy {
		required bool bTicketReusability = 1 [default = true]; //**< Identifies if the ticket is reusable or not */
		required uint32 uiMaxNoOfTicketsToObtainPerHour = 2 [default = 0]; //**< Identifies maximum number of tickets to obtain per hour */
		required uint32 uiMinNoOfTicketsToReq = 3 [default = 0]; //**< Identifies minimum number of tickets to obtain per request */
		required uint32 uiMaxNoOfTicketsToReq = 4 [default = 0]; //**< Identifies maximum number of tickets to obtain per request */
		required uint32 uiMinNoOfTicketsToRevoke = 5 [default = 0]; //**< Identifies minimum number of tickets to revoke in a request */
		required uint32 uiMaxNoOfTicketsToRevoke = 6 [default = 0];; //**< Identifies maximum number of tickets to revoke in a request */
		required uint32 uiMinNoOfTicketsToBan = 7 [default = 0];; //**< Identifies minimum number of tickets to ban in a request */
		required uint32 uiMaxNoOfTicketsToBan = 8 [default = 0];; //**< Identifies maximum number of tickets to ban in a request */
		required uint32 uiBanTicketPeriod = 9 [default = 0];; //**< Identifies the time interval to ban tickets in the case of prohibition */
	}

	repeated msgTicketPolicy stTicketPolicies = 9;
	message msgPsnymPolicy {
		required string strResponsibleNodeToRevokePsnyms = 1; //**< Identifies the responsible node to revoke pseudonyms */
		required uint32 uiMaxNoOfPsnymCertToObtainPerHour = 2 [default = 0]; //**< Identifies maximum number of pseudonyms to obtain per hour */

		// Identifies the number of requests to obtain pseudonyms using a ticket
		required uint32 uiMaxNoOfPsnymCertReqUsingATicket = 3 [default = 0]; //**< Identifies maximum number of pseudonyms to obtain with a specific ticket */
		required uint32 uiMinNoOfPsnymCertToReq = 4 [default = 0]; //**< Identifies minimum number of pseudonyms to obtain in a request */
		required uint32 uiMaxNoOfPsnymCertToReq = 5 [default = 0]; //**< Identifies maximum number of pseudonyms to obtain in a request */
		required uint32 uiMinNoOfPsnymCertToResolve = 6 [default = 0]; //**< Identifies minimum number of pseudonyms to resolve in a request */
		required uint32 uiMaxNoOfPsnymCertToResolve = 7 [default = 0]; //**< Identifies maximum number of pseudonyms to resolve in a request */
		required uint32 uiMinNoOfPsnymCertToRevoke = 8 [default = 0]; //**< Identifies minimum number of pseudonyms to revoke in a request */
		required uint32 uiMaxNoOfPsnymCertToRevoke = 9 [default = 0]; //**< Identifies maximum number of pseudonyms to revoke in a request */
		required uint32 uiMaxNumOfPsnymCertToObtainPerReq = 10 [default = 0]; //**< Identifies maximum number of pseudonyms to obtain per request */
		required string strPsnymOverlappingMechanism = 11 [default = ""]; //**< Identifies the overlapping mechanism to issue pseudonyms */
	}

	repeated msgPsnymPolicy stPsnymPolicies = 10;
	required int32 iMaxDelayThreashold = 11 [default = -1]; //**< Identifies the maximum delay threashold */
	required int32 iPsnymIssuanceValidityPeriod = 12 [default = -1]; //**< Identifies the validity period to issue pseudonyms */
	required int32 iTicketValidityPeriod = 13 [default = -1]; //**< Identifies the validity interval for the tickets */
	required int32 iRandValueThreashold = 14 [default = -1]; //**< Identifies the threashold to generate random values */
	required int32 iCryptoBuffSize = 15 [default = -1]; //**< Identifies the buufer size to perform cryptographic operations */
	required uint32 uiSignatureSize = 16 [default = 0]; //**< Identifies the size of the signature, which is algorithm dependent */
	required int32 iTimeStampLowerBound = 17 [default = -1]; //**< Identifies the lower bound to verify timestamp */
	required int32 iTimeStampUpperBound = 18 [default = -1]; //**< Identifies the upper bound to verify timestamp */
	required int32 iCurrentCRLVersion = 19 [default = -1]; //**< Identifies the current version of CRL stored */
	required int32 iNonceIncreasingValue = 20 [default = -1]; //**< Identifies the number as the formula to increase for each received nonce in the requests */
	required float fVPKIVersion = 21 [default = -1]; //**< Identifies the VPKILIB configuration version */
};

/*****************************************************************************/
/*************** Upgrading Configuration Client to PCA Server ****************/
/*****************************************************************************/
/*****************************************************************************/
/// Request from the clients to the server to upgrade system configurations
message msgUpgradeConfigurationReq_Client2Server {
	required int32 iReqType = 1 [default = -1];
	required int32 iPCAIdRange = 2 [default = -1];
	required int32 iRegionId = 3 [default = -1];
	required int32 iPsnymCertLen = 4 [default = -1];
	required string strPsnymCert = 5 [default = ""];
	required int32 iNonce = 6 [default = -1];
	required int64 tTimeStamp = 7 [default = -1];
	optional msgSignature stSign = 8;
};

/*****************************************************************************/
/// Response from the server to the clients to upgrade system configurations
message msgUpgradeConfigurationRes_Server2Client {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required msgVehicleConfig stVehConfig = 3;
	required msgPoliceConfig stPoliceConfig = 4;
	required msgVPKILibConfig stVPKILibConfig = 5;
	required int32 iNonce = 6 [default = -1];
	required int64 tTimeStamp = 7 [default = -1];
	required msgError stErrInfo = 8;
	optional msgSignature stSign = 9;
};

/*****************************************************************************/
//***************** Performing Reverse Pseudonym Resolution ******************/
/*****************************************************************************/
/*****************************************************************************/
/// Data structure sent from Police to RA to perform reverse pseudonym resolution
message msgReversePsnymResolutionReq_Police2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
	repeated string strX509Cert = 4;
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	optional msgSignature stSign = 7;
};

/*****************************************************************************/
/// Data structure sent from RA to LTCA to query for the corresponding X509 Certificate for a specific Ticket-ID
message msgReversePsnymResolutionReq_RA2LTCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
	repeated string strX509Cert = 4;
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	optional msgSignature stSign = 7;
};

/*****************************************************************************/
/// Data structure sent from LTCA to RA to send the corresponding X509 Certificate for a specific pseudonym certificate
message msgReversePsnymResolutionRes_LTCA2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
	message msgTicket {
		required string strTicketSerialNo = 1 [default = ""];
		required string strTicket = 2 [default = ""];
	};

	message msgTicketResolution {
		required string strVehX509CertSerialNo = 1 [default = ""];
		required int32 iNoOfResolvedTicket = 2 [default = -1];
		repeated msgTicket pstTicketInfo = 3;
	};

	repeated msgTicketResolution pstTicketResolutionInfo = 4;
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	required msgError stErrInfo = 7;
	optional msgSignature stSign = 8;
};

/*****************************************************************************/
/// Data structure sent from RA to PCA to fetch the Ticket-ID, corresponding to a pseudonym certificate
message msgReversePsnymResolutionReq_RA2PCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
	message msgTicket {
		required string strTicketSerialNo = 1 [default = ""];
		required string strTicket = 2 [default = ""];
	};

	message msgTicketResolution {
		required int32 iNoOfResolvedTicket = 1 [default = -1];
		repeated msgTicket pstTicketInfo = 2;
	};

	repeated msgTicketResolution pstTicketResolutionInfo = 4;
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	optional msgSignature stSign = 7;
};

/*****************************************************************************/
/// Data structure sent from PCA to RA to send the corresponding Ticket-ID for a specific pseudonym certificate
message msgReversePsnymResolutionRes_PCA2RA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
	message msgPsnym {
		required string strTicketSerialNo = 1 [default = ""];
		repeated string strPsnym = 2;
	};

	message msgTicketResolution {
		required int32 iNoOfResolvedPsnyms = 1 [default = -1];
		repeated msgPsnym pstTicketInfo = 2;
	};

	repeated msgPsnymResolution pstTicketResolutionInfo = 4;
	message msgPsnymResolution {
		required string strPsnymCertSerialNo = 1 [default = ""];
		required string strTicketSerialNo = 2 [default = ""];
		required string strTicketIdentifiableKey = 3 [default = ""];
	};

	repeated msgPsnymResolution pstPsnymResolutionInfo = 5;
	required int32 iNonce = 6 [default = -1];
	required int64 tTimeStamp = 7 [default = -1];
	required msgError stErrInfo = 8;
	optional msgSignature stSign = 9;
};

/*****************************************************************************/
/// Data structure sent from RA to Police to send the corresponding X509 Certificate for a specific pseudonym certificate
message msgReversePsnymResolutionRes_RA2Police {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required int32 iNoOfX509CertToBeResolved = 3 [default = -1];
	message msgPsnymResolution {
		required int32 iNoOfResolvedPsnyms = 1 [default = -1];
		repeated string strPsnymCert = 2;
	};

	repeated msgPsnymResolution pstPsnymResolutionInfo = 4;
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	required msgError stErrInfo = 7;
	optional msgSignature stSign = 8;
};

/*****************************************************************************/

/// Request to verify if a vehicle has obtained ticket from other LTCAs (LTCA to TVR)
message msgTicketProvisionValidationReq_LTCA2TVR {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required string strLTCAECPubKey = 3 [default = ""];
	required string strHashedVehiLTCert = 4 [default = ""];
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	optional msgSignature stSign = 7;
};

/*****************************************************************************/
/// TVR's Response to inform LTCA about the status of ticket provision for a vehicle
message msgTicketProvisionValidationRes_TVR2LTCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 chStatus = 3 [default = 0];
	required int32 iNonce = 4 [default = -1];
	required int64 tTimeStamp = 5 [default = -1];
	required msgError stErrInfo = 6;
	optional msgSignature stSign = 7;
};

/*****************************************************************************/

/// Request to verify if a ticket has obtained pseudonyms from other PCAs (PCA to PVR)
message msgPsnymProvisionValidationReq_PCA2PVR {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required string strPCAECPubKey = 3 [default = ""];
	required string strHashedTicket = 4 [default = ""];
	required int32 iNonce = 5 [default = -1];
	required int64 tTimeStamp = 6 [default = -1];
	optional msgSignature stSign = 7;
};

/*****************************************************************************/
/// Response to inform PCA if a ticket has obtained pseudonyms from other PCAs (PVR to PCA)
message msgPsnymProvisionValidationRes_PVR2PCA {
	required int32 iReqType = 1 [default = -1];
	optional msgSignerInfo stSigner = 2;
	required uint32 chStatus = 3 [default = 0];
	required int32 iNonce = 4 [default = -1];
	required int64 tTimeStamp = 5 [default = -1];
	required msgError stErrInfo = 6;
	optional msgSignature stSign = 7;
};

